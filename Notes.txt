Roadmap:
    1: Complete CS50
    2: https://www.youtube.com/watch?v=8hly31xKli0
    3: https://visualgo.net/en/sorting

    If i have time
    4: https://www.manning.com/books/grokking-algorithms

Time complexity
---------------

How much time an algorithm needs?
How much space an algorithm needs?

n -> No of pages
n/2 -> Half of many pages
    Note: It almost same if n gets bigger.

log2n -> Mathematically, how represent the idea dividing something half and half and half.

Note: In computer terms we can say
        O(n) for n,
        O(n) for n/2,
        O(log n) for log2n.

Common runtime:
    O (Big O): Worst-case time complexity
    O(n2)       eg: Selection sort
    O(n log n)  eg:
    O(n)        eg: Linear search
    O(log n)    eg: Binary Search
    O(1)        eg:

    Ω (Omega): Best-case time complexity
    Ω(n2)       eg: Selection sort
    Ω(n log n)  eg:
    Ω(n)        eg:
    Ω(log n)    eg:
    Ω(1)        eg: Linear Search and Binary Search -> On first step getting the result.

    Θ (Theta): Average-case time complexity
    Θ(n2)       eg: Selection sort
    Θ(n log n)
    Θ(n)
    Θ(log n)
    Θ(1)

    Note: Most of the case only get "best case time complexity" or "worst case time complexity". But some algorithm performs "average case time complexity".

Data structures:
Arrays, Linked Lists, Stacks, Queues, Binary Trees, Hash Tables, Heaps, Graphs, Tries,
Union find

Algorithm:
Searching, Sorting, Two pointers, Sliding window, Recursion, Dynamic Programming,
Greedy algorithm, Backtracking

Atleast should know: Arrays, Strings, Linked Lists, Stacks, Queues, HashMaps, Trees, Recursion, Sorting, Searching.

Algorithm Notes:
    - Array should be in sorted order (ascending or descending). Binary search wont work correctly on unsorted data.
    - In best case and worst case and average case selection sort performs bad. It will be sort n times.



